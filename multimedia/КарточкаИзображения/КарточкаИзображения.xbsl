
метод ПолучитьСодержимое(): Строка
    // TODO Переделать на структуру
    знч ИзображениеBase64 = КартинкаСтрокой(Изображение)
    знч ТипИзображения = ПолучитьТип(Изображение)
    
    //TODO Добавить ограничения на maxXOffset, maxYOffset
    возврат
    "
    <!DOCTYPE html>
    <html lang='ru'>
    <head>
        <meta charset='UTF-8'>
        <title>Изображение в центре</title>
        <style>
            body, html {
                margin: 0;
                padding: 0;
                width: 100%;
                height: 100vh;
                overflow: hidden;
            }

            img {
                position: absolute;
                top: 50%;
                left: 50%;
                transform: translate(-50%, -50%);
                max-width: none;
                max-height: none;
                width: 100%;
                height: 100vh;
                display: block;
                object-fit: contain;
                transition: transform 0.25s ease;
                touch-action: none;
            }
        </style>
    </head>
    <body>
        <img id='image' src='data:%{ТипИзображения};base64,%{ИзображениеBase64}'>

        <script>
            const img = document.getElementById('image');
            const initialScale = 1;
            let scale = initialScale;
            let initialDistance = null;
            let initialX = 0, initialY = 0;
            let xOffset = 0, yOffset = 0;
            let isDragging = false;

            img.addEventListener('touchstart', (e) => {
                if (e.touches.length === 2) {
                    initialDistance = getDistance(e.touches[0], e.touches[1]);
                } else if (e.touches.length === 1 && scale > initialScale) {
                    isDragging = true;
                    initialX = e.touches[0].clientX - xOffset;
                    initialY = e.touches[0].clientY - yOffset;
                }
            });

            img.addEventListener('touchmove', (e) => {
                if (e.touches.length === 2 && initialDistance) {
                    e.preventDefault();
                    const currentDistance = getDistance(e.touches[0], e.touches[1]);
                    const scaleFactor = currentDistance / initialDistance;
                    scale = Math.min(Math.max(initialScale, scale * scaleFactor), 3);
                    img.style.transform = `translate(-50%, -50%) scale(\${scale}) translate(\${xOffset}px, \${yOffset}px)`;
                    initialDistance = currentDistance;
                } else if (isDragging && e.touches.length === 1) {
                    e.preventDefault();
                    const currentX = e.touches[0].clientX;
                    const currentY = e.touches[0].clientY;
                    xOffset = currentX - initialX;
                    yOffset = currentY - initialY;

                    // Ограничения для предотвращения выхода изображения за экран
                    const containerWidth = window.innerWidth;
                    const containerHeight = window.innerHeight;
                    const imgWidth = containerWidth * scale;
                    const imgHeight = containerHeight * scale;

                    const maxXOffset = (imgWidth - containerWidth) / 2;
                    const maxYOffset = (imgHeight - containerHeight) / 2;

                    xOffset = Math.min(maxXOffset, Math.max(-maxXOffset, xOffset));
                    yOffset = Math.min(maxYOffset, Math.max(-maxYOffset, yOffset));

                    img.style.transform = `translate(-50%, -50%) scale(\${scale}) translate(\${xOffset}px, \${yOffset}px)`;
                }
            });

            img.addEventListener('touchend', (e) => {
                if (e.touches.length === 0) {
                    isDragging = false;
                }
            });

            function getDistance(touch1, touch2) {
                const dx = touch1.clientX - touch2.clientX;
                const dy = touch1.clientY - touch2.clientY;
                return Math.sqrt(dx * dx + dy * dy);
            }
        </script>
    </body>
    </html>
    "
;

@Обработчик
метод ПослеСоздания()
    
;

@Локально
@НаСервере
@ДоступноСКлиента
статический метод КартинкаСтрокой(Изображение: ДвоичныйОбъект.Ссылка): Строка
    возврат Кодировки.Base64.КодироватьВСтроку(Изображение.Загрузить().ПолучитьБайты())
;

@Локально
@НаСервере
@ДоступноСКлиента
статический метод ПолучитьТип(Изображение: ДвоичныйОбъект.Ссылка): Строка
    возврат Изображение.Загрузить().ТипСодержимого
;
