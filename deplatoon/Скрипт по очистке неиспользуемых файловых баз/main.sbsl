
конст ПУТЬ_ДО_СПИСКА_БАЗ = "C:\\Users\\Данил Воякин\\AppData\\Roaming\\1C\\1CEStart\\ibases.v8i"
/* 
* Позже расширят стандартную библиотеку, 
* в типе "СвойствоСреды" появится возможность получить %AppData%, 
* пока только так 
*/

перечисление ПричинаУдаления
    ОтсутствиеВФайловойСистеме,
    ВДиректорииНетБазы,
    ОтсутствиеВСпискеБаз
;

структура ФайловаяБазаДляУдаления
    обз знч Путь: Строка 
    обз знч ПричинаУдаления: ПричинаУдаления
   
;


метод Скрипт()
    знч СтрокиФайловыхБаз = СтрокиФайловыхБаз(ПУТЬ_ДО_СПИСКА_БАЗ)
    
    знч ДиректорияДляФайловыхБаз = ДиректорияДляФайловыхБаз(СтрокиФайловыхБаз)

    знч ПутиФайловыхБаз = ПутиФайловыхБаз(СтрокиФайловыхБаз)  
   
    // Теперь ищем те пути файловых баз, в директории которых нет файла "1Cv8.1CD"
    знч ФайловыеБазыДляУдаления = ФайловыеБазыДляУдаления(ПутиФайловыхБаз, ДиректорияДляФайловыхБаз)



    ОтобразитьФайловыеБазыДляУдаления(ФайловыеБазыДляУдаления)
    
;

метод СтрокиФайловыхБаз(ПутьДоСпискаБаз: Строка): Массив<Строка>
    знч ФайлСпискаБаз = новый Файл(ПутьДоСпискаБаз)
    исп ПотокЧтенияФайла = ФайлСпискаБаз.ОткрытьПотокЧтения()

    пер СодержимоеФайла = ПотокЧтенияФайла.ПрочитатьКакСтроку()
    ПотокЧтенияФайла.Закрыть() 

    пер СтрокиФайловыхБаз = новый Массив<Строка>()

    пер РезультатПоиска: Строка? 

    РезультатПоиска = СодержимоеФайла.Подстрока(СодержимоеФайла.Найти("Connect=File=\""), СодержимоеФайла.Найти("\";")+2)
    
    пока РезультатПоиска != Неопределено
        СтрокиФайловыхБаз.Добавить(РезультатПоиска!)

        попытка 
            СодержимоеФайла = СодержимоеФайла.Подстрока(СодержимоеФайла.Найти("Connect=File=\""))
            РезультатПоиска = СодержимоеФайла.Подстрока(СодержимоеФайла.Найти("Connect=File=\""), СодержимоеФайла.Найти("\";")+2)            
            СодержимоеФайла = СодержимоеФайла.Удалить(РезультатПоиска)  
        поймать Исключение: неизвестно
            РезультатПоиска = Неопределено
        ;        
    ;
    возврат СтрокиФайловыхБаз
;

метод ПутиФайловыхБаз(СтрокиФайловыхБаз: Массив<Строка>): Множество<Строка>
    пер ПутиФайловыхБаз: Множество<Строка>
    
    для Строка из СтрокиФайловыхБаз

        пер ПутьДоФайловойБазы = Строка
        ПутьДоФайловойБазы = ПутьДоФайловойБазы.Подстрока(ПутьДоФайловойБазы.Найти("\"") + 1, ПутьДоФайловойБазы.НайтиСКонца("\""))
        ПутиФайловыхБаз.Добавить(ПутьДоФайловойБазы)
    ;

    возврат ПутиФайловыхБаз
;

метод ФайловыеБазыДляУдаления(ПутиФайловыхБаз: Множество<Строка>, ДиректорияДляФайловыхБаз: Строка?): Множество<ФайловаяБазаДляУдаления>
   
    пер ФайловыеБазаДляУдаления: Множество<ФайловаяБазаДляУдаления>
    пер НастройкиПоиска = новый НастройкиПоиска()
                    .ИмяСодержит("1Cv8.1CD")

    для Строка из ПутиФайловыхБаз
        попытка 
            пер РезультатПоиска = Файлы.Найти(Строка, НастройкиПоиска)
            если РезультатПоиска.Пусто()
                ФайловыеБазаДляУдаления.Добавить(новый ФайловаяБазаДляУдаления(Строка, ПричинаУдаления.ВДиректорииНетБазы))
            ;   
        поймать Исключение: неизвестно
            если Исключение это ИсключениеФайловойСистемы
                ФайловыеБазаДляУдаления.Добавить(новый ФайловаяБазаДляУдаления(Строка, ПричинаУдаления.ОтсутствиеВФайловойСистеме))
            ;    
        ;

    ;

    если ДиректорияДляФайловыхБаз != Неопределено 
        пер РезультатПоиска = Файлы.Найти(ДиректорияДляФайловыхБаз!, НастройкиПоиска)
        пер ПутиНайденныхФайловыхБаз: Множество<Строка>
        для Строка из РезультатПоиска
            если Строка.Каталог != Неопределено
                ПутиНайденныхФайловыхБаз.Добавить(Строка.Каталог!.Путь)
            ;
        ;

        пер ПутиБазОтсутствующихВСпискеБаз = ПутиНайденныхФайловыхБаз.Разность(ПутиФайловыхБаз)

        для Строка из ПутиБазОтсутствующихВСпискеБаз
            ФайловыеБазаДляУдаления.Добавить(новый ФайловаяБазаДляУдаления(Строка, ПричинаУдаления.ОтсутствиеВСпискеБаз))
        ;
    ;
    возврат ФайловыеБазаДляУдаления
;

метод ДиректорияДляФайловыхБаз(СтрокиФайловыхБаз: Массив<Строка>): Строка?
    пер ДиректорияДляФайловыхБаз: Строка?
    
    пер МаскаПоиска = СтрокиФайловыхБаз.Получить(0) 
    пер Итератор = 0
    пер ПодстрокаПрисутствуетВоВсехЭлементахМассива = Ложь

    пока не ПодстрокаПрисутствуетВоВсехЭлементахМассива
        пер КоличествоВхождений = 0
        
        для Строка из СтрокиФайловыхБаз
            если Строка.НачинаетсяС(МаскаПоиска)
                КоличествоВхождений = КоличествоВхождений + 1

            ;
        ;
        
        если КоличествоВхождений != СтрокиФайловыхБаз.Размер()
            МаскаПоиска = МаскаПоиска.ПодстрокаСНачала(МаскаПоиска.Длина() - 1)
        иначе
            ПодстрокаПрисутствуетВоВсехЭлементахМассива = Истина
        ;
        если МаскаПоиска.Длина() == 0
            Итератор = Итератор + 1
            попытка 
                МаскаПоиска = СтрокиФайловыхБаз.Получить(Итератор)    
            поймать Исключение: ИсключениеИндексВнеГраниц
                возврат ДиректорияДляФайловыхБаз
            ;
        ;
    ; 

    ДиректорияДляФайловыхБаз = МаскаПоиска.Подстрока(МаскаПоиска.Найти("\"") + 1)
    
    возврат ДиректорияДляФайловыхБаз    
;

метод ВывестиШапкуСообщения(Сообщение: Строка)
    знч СтрокаОформления = "========================================================================"
    
    Консоль.Записать(СтрокаОформления)
    Консоль.Записать(Сообщение)
    Консоль.Записать(СтрокаОформления)
;

метод ОтобразитьФайловыеБазыДляУдаления(ФайловыеБазыДляУдаления: Множество<ФайловаяБазаДляУдаления>)
    
    если ФайловыеБазыДляУдаления.Пусто()
        ВывестиШапкуСообщения("Творческого беспорядка в списке не обнаружено")
        возврат
    ;
    
    
    пер Сообщение: Строка

    пер СписокВДиректорииНетБазы = новый Массив<Строка>()

    для ФайловаяБаза из ФайловыеБазыДляУдаления
        если ФайловаяБаза.ПричинаУдаления == ПричинаУдаления.ВДиректорииНетБазы
            СписокВДиректорииНетБазы.Добавить(ФайловаяБаза.Путь)
        ;       
    ;
    если не СписокВДиректорииНетБазы.Пусто()
        ВывестиШапкуСообщения("В списке директорий обнаружены папки без баз:")
        Сообщение = Строки.Соединить(СписокВДиректорииНетБазы, Символы.НОВАЯ_СТРОКА)
        Консоль.Записать(Сообщение)
    ;
    

    пер СписокОтсутствиеВФайловойСистеме = новый Массив<Строка>()

    для ФайловаяБаза из ФайловыеБазыДляУдаления
        если ФайловаяБаза.ПричинаУдаления == ПричинаУдаления.ОтсутствиеВФайловойСистеме
            СписокОтсутствиеВФайловойСистеме.Добавить(ФайловаяБаза.Путь) 
        ;     
    ;
    
    если не СписокОтсутствиеВФайловойСистеме.Пусто()
        ВывестиШапкуСообщения("В списке обнаружены базы отсутствующие в файловой системе:")
        Сообщение = Строки.Соединить(СписокОтсутствиеВФайловойСистеме, Символы.НОВАЯ_СТРОКА)
        Консоль.Записать(Сообщение)
    ;


    пер СписокОтсутствиеВСпискеБаз = новый Массив<Строка>()

    для ФайловаяБаза из ФайловыеБазыДляУдаления
        если ФайловаяБаза.ПричинаУдаления == ПричинаУдаления.ОтсутствиеВСпискеБаз
            СписокОтсутствиеВСпискеБаз.Добавить(ФайловаяБаза.Путь) 
        ;     
    ;
    
    если не СписокОтсутствиеВСпискеБаз.Пусто()
        ВывестиШапкуСообщения("В файловой системе обнаружены базы, отсутствующие в списке баз:")
        Сообщение = Строки.Соединить(СписокОтсутствиеВСпискеБаз, Символы.НОВАЯ_СТРОКА)
        Консоль.Записать(Сообщение)
    ;
;